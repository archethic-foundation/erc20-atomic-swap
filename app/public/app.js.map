{
  "version": 3,
  "sources": ["../client/app.js"],
  "sourcesContent": ["window.onload = async function () {\n  if (typeof window.ethereum !== \"undefined\") {\n    console.log(\"MetaMask is installed!\");\n  } else {\n    throw \"No ethereum provider is installed\";\n  }\n};\n\n$(\"#connectMetamaskBtn\").on(\"click\", async () => {\n\n  try {\n    provider = new ethers.providers.Web3Provider(window.ethereum);\n\n    // MetaMask requires requesting permission to connect users accounts\n    await provider.send(\"eth_requestAccounts\", []);\n    await startApp(provider);\n  }\n  catch (e) {\n    $(\"#error\")\n      .text(`An error occured: ${e.message || e}`)\n      .show();\n  }\n});\n\nasync function startApp(provider) {\n\n  const { chainId: ethChainId } = await provider.getNetwork();\n  const signer = provider.getSigner();\n\n  let sourceChainLogo;\n  switch (ethChainId) {\n    case 80001:\n      sourceChainLogo = \"Polygon-logo.svg\";\n      break;\n    case 137:\n      sourceChainLogo = \"Polygon-logo.svg\";\n      break;\n    case 97:\n      sourceChainLogo = \"BSC-logo.svg\";\n      break;\n    case 56:\n      sourceChainLogo = \"BSC-logo.svg\";\n      break;\n    default:\n      sourceChainLogo = \"Ethereum-logo.svg\";\n      break;\n  }\n\n  const {\n    archethicEndpoint,\n    unirisTokenAddress,\n    recipientEthereum,\n    sufficientFunds,\n    UCOPrice\n  } = await getConfig(ethChainId);\n\n  $(\"#sourceChainImg\").attr(\"src\", `assets/images/bc-logos/${sourceChainLogo}`);\n  $(\"#main\").hide();\n  $(\"#swapForm\").show();\n\n  $(\"#ucoPrice\").text(`1 UCO = ${UCOPrice}$`).show()\n  $(\"#swapBalanceUSD\").text(UCOPrice)\n\n  if (!sufficientFunds) {\n    $(\"#error\").text(\n      \"An error occured: Bridge has insuffficient funds. Please retry later\"\n    );\n    return;\n  }\n\n  const archethic = new Archethic(archethicEndpoint);\n  await archethic.connect();\n  console.log(\"Archethic endpoint: \", archethicEndpoint);\n\n  const account = await signer.getAddress();\n  const unirisContract = await getERC20Contract(unirisTokenAddress, provider);\n\n  const balance = await unirisContract.balanceOf(account);\n  const erc20Amount = ethers.utils.formatUnits(balance, 18)\n  $(\"#fromBalanceUCO\").text(erc20Amount);\n  $(\"#fromBalanceUSD\").text(erc20Amount * UCOPrice);\n\n  $(\"#recipientAddress\").on(\"change\", async (e) => {\n    const archethicBalance = await getLastTransactionBalance(\n      archethic,\n      $(e.target).val()\n    );\n\n    const ucoAmount = archethicBalance / 1e8\n\n    $(\"#toBalanceUCO\").text(ucoAmount);\n    $(\"#toBalanceUSD\").text(UCOPrice * ucoAmount);\n  });\n\n  $(\"#nbTokensToSwap\").on(\"change\", (e) => {\n    const amount = $(e.target).val()\n    $(\"#swapBalanceUSD\").text(amount * UCOPrice)\n  })\n  $(\"#btnSwap\").show();\n\n  $(\"#swapForm\").on(\"submit\", async (e) => {\n    e.preventDefault();\n    if (!e.target.checkValidity()) {\n      return;\n    }\n\n    const recipientAddress = $(\"#recipientAddress\").val();\n    await handleFormSubmit(\n      signer,\n      unirisContract,\n      recipientEthereum,\n      recipientAddress,\n      ethChainId,\n      archethic,\n      UCOPrice\n    );\n  });\n}\n\nasync function getERC20Contract(unirisTokenAddress, provider) {\n  const unirisTokenABI = await getUnirisTokenABI();\n  return new ethers.Contract(unirisTokenAddress, unirisTokenABI, provider);\n}\n\nasync function handleFormSubmit(\n  signer,\n  unirisContract,\n  recipientEthereum,\n  recipientArchethic,\n  ethChainId,\n  archethic,\n  UCOPrice\n) {\n  $(\"#steps\").show();\n\n  const secret = new Uint8Array(32);\n  crypto.getRandomValues(secret);\n\n  const secretHex = uint8ArrayToHex(secret);\n\n  let secretDigest = await crypto.subtle.digest(\"SHA-256\", secret);\n  secretDigest = new Uint8Array(secretDigest);\n\n  const secretDigestHex = uint8ArrayToHex(secretDigest);\n\n  const amount = $(\"#nbTokensToSwap\").val();\n  $(\"#connectingStep\").addClass(\"is-active\");\n\n  try {\n    const HTLC_Contract = await deployHTLC(\n      recipientEthereum,\n      unirisContract.address,\n      amount,\n      secretDigest,\n      signer,\n      10000\n    );\n\n    const HTLCAddress = HTLC_Contract.address;\n\n    await transferTokensToHTLC(amount, HTLCAddress, unirisContract, signer);\n\n    const contractAddress = await sendDeployRequest(\n      secretDigestHex,\n      recipientArchethic,\n      amount,\n      HTLCAddress,\n      ethChainId\n    );\n    console.log(\"Contract address on Archethic\", contractAddress);\n\n    $(\"#connectingStep\").removeClass(\"is-active\");\n    $(\"#swapStep\").addClass(\"is-active\");\n\n    await sendWithdrawRequest(\n      contractAddress,\n      HTLCAddress,\n      secretHex,\n      ethChainId\n    );\n    console.log(\"Token swap finish\");\n\n    const archethicBalance = await getLastTransactionBalance(\n      archethic,\n      recipientArchethic\n    );\n\n    const newUCOBalance = archethicBalance / 1e8\n\n    $(\"#toBalanceUCO\").text(newUCOBalance);\n    $(\"#toBalanceUSD\").text(UCOPrice * newUCOBalance)\n\n    $(\"#swapStep\").removeClass(\"is-active\");\n    $(\"#endPhase\").addClass(\"is-active\");\n  } catch (e) {\n    console.error(e.message || e);\n    $(\"#error\")\n      .text(`An error occured: ${e.message || e}`)\n      .show();\n  }\n}\n\nasync function sendDeployRequest(\n  secretDigestHex,\n  recipientAddress,\n  amount,\n  ethereumContractAddress,\n  ethChainId\n) {\n  const endTime = new Date();\n  endTime.setSeconds(endTime.getSeconds() + 10000);\n  const endTimeUNIX = Math.floor(endTime / 1000);\n\n  return fetch(\"/swap/deployContract\", {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      secretHash: secretDigestHex,\n      recipientAddress: recipientAddress,\n      amount: amount * 1e8,\n      endTime: endTimeUNIX,\n      ethereumContractAddress: ethereumContractAddress,\n      ethereumChainId: ethChainId,\n    }),\n  })\n    .then(handleResponse)\n    .then((r) => r.contractAddress);\n}\n\nasync function sendWithdrawRequest(\n  archethicContractAddress,\n  ethereumContractAddress,\n  secret,\n  ethChainId\n) {\n  return fetch(\"/swap/withdraw\", {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      archethicContractAddress: archethicContractAddress,\n      ethereumContractAddress: ethereumContractAddress,\n      secret: secret,\n      ethereumChainId: ethChainId,\n    }),\n  }).then(handleResponse)\n  .then(r => {\n    const { ethereumWithdrawTransaction, archethicWithdrawTransaction } = r\n    console.log(`Ethereum's withdraw transaction ${ethereumWithdrawTransaction}`)\n    console.log(`Archethic's withdraw transaction ${archethicWithdrawTransaction}`)\n  })\n}\n\nasync function deployHTLC(\n  recipientEthereum,\n  unirisTokenAddress,\n  amount,\n  hash,\n  signer,\n  lockTime\n) {\n  const { abi: HTLCABI, bytecode: HTLCByteCode } = await getHTLC();\n  const factory = new ethers.ContractFactory(HTLCABI, HTLCByteCode, signer);\n\n  const contract = await factory.deploy(\n    recipientEthereum,\n    unirisTokenAddress,\n    ethers.utils.parseUnits(amount, 18),\n    hash,\n    lockTime,\n    { gasLimit: 1000000 }\n  );\n\n  await contract.deployTransaction.wait();\n  console.log(\"HTLC contract deployed at \" + contract.address);\n\n  return contract;\n}\n\nasync function transferTokensToHTLC(\n  amount,\n  HTLCAddress,\n  unirisContract,\n  signer\n) {\n  const unirisWithSigner = unirisContract.connect(signer);\n\n  const tx = await unirisWithSigner.transfer(\n    HTLCAddress,\n    ethers.utils.parseUnits(amount, 18)\n  );\n\n  await tx.wait()\n  console.log(`${amount} UCO transfered`);\n}\n\nconst byteToHex = [];\nfor (let n = 0; n <= 0xff; ++n) {\n  const hexOctet = n.toString(16).padStart(2, \"0\");\n  byteToHex.push(hexOctet);\n}\n\nfunction uint8ArrayToHex(bytes) {\n  const buff = new Uint8Array(bytes);\n  const hexOctets = new Array(buff.length);\n\n  for (let i = 0; i < buff.length; ++i) {\n    hexOctets[i] = byteToHex[buff[i]];\n  }\n\n  return hexOctets.join(\"\");\n}\n\nasync function getConfig(ethChainId) {\n  return fetch(\"/status\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n    },\n    body: JSON.stringify({\n      ethereumChainId: ethChainId,\n    }),\n  })\n    .then(handleResponse)\n    .then((r) => {\n      if (r.status != \"ok\") {\n        throw r.status;\n      }\n\n      return {\n        archethicEndpoint: r.archethicEndpoint,\n        unirisTokenAddress: r.unirisTokenAddress,\n        recipientEthereum: r.recipientEthereum,\n        sufficientFunds: r.sufficientFunds,\n        UCOPrice: r.UCOPrice\n      };\n    });\n}\n\nasync function getUnirisTokenABI() {\n  const r = await fetch(\"uco_ABI.json\");\n  return await r.json();\n}\n\nasync function getHTLC() {\n  const r = await fetch(\"HTLC.json\");\n  const r_1 = await r.json();\n  return {\n    abi: r_1.abi,\n    bytecode: r_1.bytecode,\n  };\n}\n\nasync function getArchethicBalance(archethic, address) {\n  archethic.requestNode(async (endpoint) => {\n    const url = new URL(\"/api\", endpoint);\n    const r = await fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify({\n        query: `\n          query {\n            balance(address: \"${address}\") {\n              uco\n            }\n          }\n        `,\n      }),\n    });\n    const res = await r.json();\n    if (res.data.balance && res.data.balance.uco) {\n      return res.data.balance.uco;\n    }\n    return 0;\n  });\n}\n\nasync function getLastTransactionBalance(archethic, address) {\n  return archethic.requestNode(async (endpoint) => {\n    const url = new URL(\"/api\", endpoint);\n    const r = await fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify({\n        query: `\n            query {\n              lastTransaction(address: \"${address}\") {\n                 balance {\n                   uco\n                 }\n              }\n            }\n          `,\n      }),\n    });\n    const res = await r.json();\n\n    if (\n      res.errors &&\n      res.errors.find((x) => x.message == \"transaction_not_exists\")\n    ) {\n      return await getInputs(archethic, address);\n    }\n\n    if (res.data.lastTransaction && res.data.lastTransaction.balance) {\n      return res.data.lastTransaction.balance.uco;\n    }\n\n    return 0;\n  });\n}\n\nasync function getInputs(archethic, address) {\n  return archethic.requestNode(async (endpoint) => {\n    const url = new URL(\"/api\", endpoint);\n    const r = await fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify({\n        query: `\n            query {\n              transactionInputs(address: \"${address}\") {\n                 type,\n                 amount\n              }\n            }\n          `,\n      }),\n    });\n    const res = await r.json();\n    if (res.data.transactionInputs && res.data.transactionInputs.length > 0) {\n      return res.data.transactionInputs\n        .filter((r) => r.type == \"UCO\")\n        .reduce((acc, { amount: amount }) => acc + amount, 0);\n    }\n    return 0;\n  });\n}\n\nasync function handleResponse(response) {\n  return new Promise(function (resolve, reject) {\n    if (response.status >= 200 && response.status <= 299) {\n      response.json().then(resolve);\n    } else {\n      response\n        .json()\n        .then(reject)\n        .catch(() => reject(response.statusText));\n    }\n  });\n}\n"],
  "mappings": "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",
  "names": ["startApp", "e", "provider", "ethChainId", "signer", "sourceChainLogo", "archethicEndpoint", "unirisTokenAddress", "recipientEthereum", "sufficientFunds", "UCOPrice", "getConfig", "archethic", "account", "unirisContract", "getERC20Contract", "balance", "erc20Amount", "ucoAmount", "getLastTransactionBalance", "amount", "recipientAddress", "handleFormSubmit", "unirisTokenABI", "getUnirisTokenABI", "recipientArchethic", "secret", "secretHex", "uint8ArrayToHex", "secretDigest", "secretDigestHex", "HTLCAddress", "deployHTLC", "transferTokensToHTLC", "contractAddress", "sendDeployRequest", "sendWithdrawRequest", "newUCOBalance", "ethereumContractAddress", "endTime", "endTimeUNIX", "handleResponse", "r", "archethicContractAddress", "ethereumWithdrawTransaction", "archethicWithdrawTransaction", "hash", "lockTime", "HTLCABI", "HTLCByteCode", "getHTLC", "contract", "byteToHex", "n", "hexOctet", "bytes", "buff", "hexOctets", "i", "r_1", "getLastTransactionBalance", "archethic", "address", "endpoint", "url", "res", "x", "getInputs", "r", "acc", "amount", "handleResponse", "response", "resolve", "reject"]
}
