{
  "version": 3,
  "sources": ["../client/app.js"],
  "sourcesContent": ["window.onload = async function () {\n  if (typeof window.ethereum !== \"undefined\") {\n    console.log(\"MetaMask is installed!\");\n  } else {\n    throw \"No ethereum provider is installed\";\n  }\n};\n\n$(\"#connectMetamaskBtn\").on(\"click\", async () => {\n  try {\n    $(\"#connectMetamaskBtn\").hide();\n    $(\"#connectMetamaskBtnSpinner\").show();\n    provider = new ethers.providers.Web3Provider(window.ethereum);\n\n    // MetaMask requires requesting permission to connect users accounts\n    await provider.send(\"eth_requestAccounts\", []);\n    await startApp(provider);\n    $(\"#connectMetamaskBtnSpinner\").hide();\n    $(\"#connectMetamaskBtn\").show();\n  }\n  catch (e) {\n    $(\"#connectMetamaskBtnSpinner\").hide();\n    $(\"#connectMetamaskBtn\").show();\n    $(\"#error\")\n      .text(`An error occured: ${e.message || e}`)\n      .show();\n  }\n});\n\nasync function startApp(provider) {\n\n  const { chainId: ethChainId } = await provider.getNetwork();\n  const signer = provider.getSigner();\n\n  let sourceChainLogo;\n  switch (ethChainId) {\n    case 80001:\n      sourceChainLogo = \"Polygon-logo.svg\";\n      $(\"#fromChain\").text(\"Polygon\")\n      break;\n    case 137:\n      sourceChainLogo = \"Polygon-logo.svg\";\n      $(\"#fromChain\").text(\"Polygon\")\n      break;\n    case 97:\n      sourceChainLogo = \"BSC-logo.svg\";\n      $(\"#fromChain\").text(\"Binance\")\n      break;\n    case 56:\n      sourceChainLogo = \"BSC-logo.svg\";\n      $(\"#fromChain\").text(\"Binance\")\n      break;\n    default:\n      sourceChainLogo = \"Ethereum-logo.svg\";\n      $(\"#fromChain\").text(\"Ethereum\")\n      break;\n  }\n\n  const {\n    archethicEndpoint,\n    unirisTokenAddress,\n    recipientEthereum,\n    sufficientFunds,\n    UCOPrice\n  } = await getConfig(ethChainId);\n\n  $(\"#sourceChainImg\").attr(\"src\", `assets/images/bc-logos/${sourceChainLogo}`);\n  $(\"#main\").hide();\n  $(\"#swapForm\").show();\n\n  $(\"#ucoPrice\").text(`1 UCO = ${UCOPrice}$`).show()\n  $(\"#swapBalanceUSD\").text(UCOPrice)\n\n  if (!sufficientFunds) {\n    $(\"#error\").text(\n      \"An error occured: Bridge has insuffficient funds. Please retry later\"\n    );\n    return;\n  }\n\n  console.log(\"Archethic endpoint: \", archethicEndpoint);\n\n  const account = await signer.getAddress();\n  const unirisContract = await getERC20Contract(unirisTokenAddress, provider);\n\n  const balance = await unirisContract.balanceOf(account);\n  const erc20Amount = ethers.utils.formatUnits(balance, 18)\n  $(\"#fromBalanceUCO\").text(parseFloat(erc20Amount).toFixed(2));\n  $(\"#fromBalanceUSD\").text(erc20Amount * UCOPrice);\n\n  $(\"#recipientAddress\").on(\"change\", async (e) => {\n    const archethicBalance = await getArchethicBalance($(e.target).val());\n\n    const ucoAmount = archethicBalance / 1e8\n\n    $(\"#toBalanceUCO\").text(parseFloat(ucoAmount).toFixed(2));\n    $(\"#toBalanceUSD\").text(UCOPrice * ucoAmount);\n    $(\"#btnSwap\").show();\n  });\n  \n  $(\"#recipientAddress\").focus()\n\n  $(\"#nbTokensToSwap\").on(\"change\", (e) => {\n    const amount = $(e.target).val()\n    $(\"#swapBalanceUSD\").text(amount * UCOPrice)\n  })\n  \n\n  $(\"#swapForm\").on(\"submit\", async (e) => {\n    e.preventDefault();\n    if (!e.target.checkValidity()) {\n      return;\n    }\n    \n    $(\"#btnSwap\").hide();\n\n    const recipientAddress = $(\"#recipientAddress\").val();\n    await handleFormSubmit(\n      signer,\n      unirisContract,\n      recipientEthereum,\n      recipientAddress,\n      ethChainId,\n      archethic,\n      UCOPrice\n    );\n  });\n}\n\nasync function getERC20Contract(unirisTokenAddress, provider) {\n  const unirisTokenABI = await getUnirisTokenABI();\n  return new ethers.Contract(unirisTokenAddress, unirisTokenABI, provider);\n}\n\nasync function handleFormSubmit(\n  signer,\n  unirisContract,\n  recipientEthereum,\n  recipientArchethic,\n  ethChainId,\n  UCOPrice\n) {\n  $(\"#steps\").show();\n\n  const secret = new Uint8Array(32);\n  crypto.getRandomValues(secret);\n\n  const secretHex = uint8ArrayToHex(secret);\n\n  let secretDigest = await crypto.subtle.digest(\"SHA-256\", secret);\n  secretDigest = new Uint8Array(secretDigest);\n\n  const secretDigestHex = uint8ArrayToHex(secretDigest);\n\n  const amount = $(\"#nbTokensToSwap\").val();\n  $(\"#ethDeploymentStep\").addClass(\"is-active\");\n\n  try {\n    const HTLC_Contract = await deployHTLC(\n      recipientEthereum,\n      unirisContract.address,\n      amount,\n      secretDigest,\n      signer,\n      7200 // 2 hours of locktime\n    );\n    $(\"#ethDeploymentStep\").removeClass(\"is-active\");\n\n    const HTLCAddress = HTLC_Contract.address\n    \n    $(\"#ethTransferStep\").addClass(\"is-active\")\n    await transferTokensToHTLC(amount, HTLCAddress, unirisContract, signer);\n    $(\"#ethTransferStep\").removeClass(\"is-active\")\n\n    $(\"#archethicDeploymentStep\").addClass(\"is-active\");\n    \n    const contractAddress = await sendDeployRequest(\n     secretDigestHex,\n     recipientArchethic,\n     amount,\n     HTLCAddress,\n     ethChainId\n    );\n    console.log(\"Contract address on Archethic\", contractAddress);\n    \n    $(\"#archethicDeploymentStep\").removeClass(\"is-active\");\n\n    $(\"#swapStep\").addClass(\"is-active\");\n    \n    const txReceipt = await withdrawERC20Token(HTLC_Contract, signer, secretHex)\n    console.log(`Ethereum's withdraw transaction - ${txReceipt.transactionHash}`);\n    \n    const ethAccount = await signer.getAddress();\n    const erc20Balance = await unirisContract.balanceOf(ethAccount);\n    const erc20Amount = ethers.utils.formatUnits(erc20Balance, 18)\n    $(\"#fromBalanceUCO\").text(parseFloat(erc20Amount).toFixed(2));\n    $(\"#fromBalanceUSD\").text(erc20Amount * UCOPrice);\n\n    await sendWithdrawRequest(\n     contractAddress,\n     HTLCAddress,\n     txReceipt.transactionHash,\n     secretHex,\n     ethChainId\n    );\n    console.log(\"Token swap finish\");\n\n    $(\"#swapStep\").removeClass(\"is-active\");\n    \n    const archethicBalance = await getArchethicBalance(recipientArchethic);\n\n    const newUCOBalance = archethicBalance / 1e8\n\n    $(\"#toBalanceUCO\").text(parseFloat(newUCOBalance).toFixed(2));\n    $(\"#toBalanceUSD\").text(UCOPrice * newUCOBalance)\n\n    $(\"#endStep\").addClass(\"is-active\");\n  } catch (e) {\n    console.error(e.message || e);\n    $(\"#error\")\n      .text(`An error occured: ${e.message || e}`)\n      .show();\n  }\n}\n\nasync function sendDeployRequest(\n  secretDigestHex,\n  recipientAddress,\n  amount,\n  ethereumContractAddress,\n  ethChainId\n) {\n  const endTime = new Date();\n  endTime.setSeconds(endTime.getSeconds() + 10000);\n  const endTimeUNIX = Math.floor(endTime / 1000);\n\n  return fetch(\"/swap/deployContract\", {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      secretHash: secretDigestHex,\n      recipientAddress: recipientAddress,\n      amount: amount * 1e8,\n      endTime: endTimeUNIX,\n      ethereumContractAddress: ethereumContractAddress,\n      ethereumChainId: ethChainId,\n    }),\n  })\n    .then(handleResponse)\n    .then((r) => r.contractAddress);\n}\n\nasync function withdrawERC20Token(HTLC_Contract, signer, secret) {\n  const HTLC_ContractSigner = await HTLC_Contract.connect(signer)\n  const tx = await HTLC_ContractSigner.withdraw(`0x${secret}`, { gasLimit: 10000000 })\n  return await tx.wait()\n}\n\nasync function sendWithdrawRequest(\n  archethicContractAddress,\n  ethereumContractAddress,\n  ethereumWithdrawTransaction,\n  secret,\n  ethChainId\n) {\n  return fetch(\"/swap/withdraw\", {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      archethicContractAddress: archethicContractAddress,\n      ethereumContractAddress: ethereumContractAddress,\n      ethereumWithdrawTransaction: ethereumWithdrawTransaction,\n      secret: secret,\n      ethereumChainId: ethChainId,\n    }),\n  }).then(handleResponse)\n    .then(r => {\n      const { archethicWithdrawTransaction } = r\n      console.log(`Archethic's withdraw transaction ${archethicWithdrawTransaction}`)\n    })\n}\n\nasync function deployHTLC(\n  recipientEthereum,\n  unirisTokenAddress,\n  amount,\n  hash,\n  signer,\n  lockTime\n) {\n  const { abi: HTLCABI, bytecode: HTLCByteCode } = await getHTLC();\n  const factory = new ethers.ContractFactory(HTLCABI, HTLCByteCode, signer);\n\n  const contract = await factory.deploy(\n    recipientEthereum,\n    unirisTokenAddress,\n    ethers.utils.parseUnits(amount, 18),\n    hash,\n    lockTime,\n    { gasLimit: 1000000 }\n  );\n\n  await contract.deployTransaction.wait();\n  console.log(\"HTLC contract deployed at \" + contract.address);\n\n  return contract;\n}\n\nasync function transferTokensToHTLC(\n  amount,\n  HTLCAddress,\n  unirisContract,\n  signer\n) {\n  const unirisWithSigner = unirisContract.connect(signer);\n\n  const tx = await unirisWithSigner.transfer(\n    HTLCAddress,\n    ethers.utils.parseUnits(amount, 18)\n  );\n\n  await tx.wait()\n  console.log(`${amount} UCO transfered`);\n}\n\nconst byteToHex = [];\nfor (let n = 0; n <= 0xff; ++n) {\n  const hexOctet = n.toString(16).padStart(2, \"0\");\n  byteToHex.push(hexOctet);\n}\n\nfunction uint8ArrayToHex(bytes) {\n  const buff = new Uint8Array(bytes);\n  const hexOctets = new Array(buff.length);\n\n  for (let i = 0; i < buff.length; ++i) {\n    hexOctets[i] = byteToHex[buff[i]];\n  }\n\n  return hexOctets.join(\"\");\n}\n\nasync function getConfig(ethChainId) {\n  return fetch(\"/status\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n    },\n    body: JSON.stringify({\n      ethereumChainId: ethChainId,\n    }),\n  })\n    .then(handleResponse)\n    .then((r) => {\n      if (r.status != \"ok\") {\n        throw r.status;\n      }\n\n      return {\n        archethicEndpoint: r.archethicEndpoint,\n        unirisTokenAddress: r.unirisTokenAddress,\n        recipientEthereum: r.recipientEthereum,\n        sufficientFunds: r.sufficientFunds,\n        UCOPrice: r.UCOPrice\n      };\n    });\n}\n\nasync function getUnirisTokenABI() {\n  const r = await fetch(\"uco_abi.json\");\n  return await r.json();\n}\n\nasync function getHTLC() {\n  const r = await fetch(\"HTLC.json\");\n  const r_1 = await r.json();\n  return {\n    abi: r_1.abi,\n    bytecode: r_1.bytecode,\n  };\n}\n\nasync function handleResponse(response) {\n  return new Promise(function (resolve, reject) {\n    if (response.status >= 200 && response.status <= 299) {\n      response.json().then(resolve);\n    } else {\n      response\n        .json()\n        .then(reject)\n        .catch(() => reject(response.statusText));\n    }\n  });\n}\n\nasync function getArchethicBalance(address) {\n   return fetch(`/balances/archethic/${address}`)\n    .then(handleResponse)\n    .then((r) => {\n      return r.balance\n    });\n}"],
  "mappings": "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",
  "names": ["startApp", "e", "provider", "ethChainId", "signer", "sourceChainLogo", "archethicEndpoint", "unirisTokenAddress", "recipientEthereum", "sufficientFunds", "UCOPrice", "getConfig", "account", "unirisContract", "getERC20Contract", "balance", "erc20Amount", "ucoAmount", "getArchethicBalance", "amount", "recipientAddress", "handleFormSubmit", "unirisTokenABI", "getUnirisTokenABI", "recipientArchethic", "secret", "secretHex", "uint8ArrayToHex", "secretDigest", "secretDigestHex", "HTLC_Contract", "deployHTLC", "HTLCAddress", "transferTokensToHTLC", "contractAddress", "sendDeployRequest", "txReceipt", "withdrawERC20Token", "ethAccount", "erc20Balance", "sendWithdrawRequest", "newUCOBalance", "ethereumContractAddress", "endTime", "endTimeUNIX", "handleResponse", "r", "archethicContractAddress", "ethereumWithdrawTransaction", "archethicWithdrawTransaction", "hash", "lockTime", "HTLCABI", "HTLCByteCode", "getHTLC", "contract", "byteToHex", "n", "hexOctet", "bytes", "buff", "hexOctets", "i", "r_1", "response", "resolve", "reject", "address"]
}
