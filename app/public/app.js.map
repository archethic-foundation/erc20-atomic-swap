{
  "version": 3,
  "sources": ["../client/app.js"],
  "sourcesContent": ["window.onload = async function () {\n  if (typeof window.ethereum !== \"undefined\") {\n    console.log(\"MetaMask is installed!\");\n  } else {\n    throw \"No ethereum provider is installed\";\n  }\n};\n\n$(\"#connectMetamaskBtn\").on(\"click\", async () => {\n  try {\n    $(\"#connectMetamaskBtn\").hide();\n    $(\"#connectMetamaskBtnSpinner\").show();\n    provider = new ethers.providers.Web3Provider(window.ethereum);\n\n    // MetaMask requires requesting permission to connect users accounts\n    await provider.send(\"eth_requestAccounts\", []);\n    await startApp(provider);\n  }\n  catch (e) {\n    $(\"#connectMetamaskBtnSpinner\").hide();\n    $(\"#connectMetamaskBtn\").show();\n    $(\"#error\")\n      .text(`An error occured: ${e.message || e}`)\n      .show();\n  }\n});\n\nlet toChainExplorer;\nlet fromChainName\n\nasync function startApp(provider) {\n\n  const { chainId: ethChainId } = await provider.getNetwork();\n  const signer = provider.getSigner();\n\n  let sourceChainLogo;\n\n  switch (ethChainId) {\n    case 80001:\n      sourceChainLogo = \"Polygon-logo.svg\";\n\n      fromChainName = \"Polygon\"\n      $(\"#fromChain\").text(fromChainName)\n      $(\"#fromNetworkLabel\").text(\"Mumbai Polygon Testnet\")\n      $(\"#toNetworkLabel\").text(\"Archethic Testnet\")\n      break;\n    case 137:\n      sourceChainLogo = \"Polygon-logo.svg\";\n      fromChainName = \"Polygon\"\n\n      $(\"#fromChain\").text(fromChainName)\n      $(\"#fromNetworkLabel\").text(\"Polygon\")\n      $(\"#toNetworkLabel\").text(\"Archethic\")\n      break;\n    case 97:\n      sourceChainLogo = \"BSC-logo.svg\";\n      fromChainName = \"Binance\"\n\n      $(\"#fromChain\").text(fromChainName)\n      $(\"#fromNetworkLabel\").text(\"BSC Testnet\")\n      $(\"#toNetworkLabel\").text(\"Archethic Testnet\")\n      break;\n    case 56:\n      sourceChainLogo = \"BSC-logo.svg\";\n      fromChainName = \"Binance\"\n\n      $(\"#fromChain\").text(fromChainName)\n      $(\"#fromNetworkLabel\").text(\"BSC\")\n      $(\"#toNetworkLabel\").text(\"Archethic\")\n      break;\n    case 5:\n      sourceChainLogo = \"Ethereum-logo.svg\";\n      fromChainName = \"Ethereum\"\n\n      $(\"#fromChain\").text(fromChainName)\n      $(\"#fromNetworkLabel\").text(\"Goerli Ethereum Testnet\")\n      $(\"#toNetworkLabel\").text(\"Archethic Testnet\")\n      break;\n    case 1337:\n      sourceChainLogo = \"Ethereum-logo.svg\";\n      fromChainName = \"Ethereum\"\n\n      $(\"#fromChain\").text(fromChainName)\n      $(\"#fromNetworkLabel\").text(\"Ethereum Devnet\")\n      $(\"#toNetworkLabel\").text(\"Archethic Devnet\")\n      break;\n    default:\n      sourceChainLogo = \"Ethereum-logo.svg\";\n      fromChain = \"Ethereum\"\n\n      $(\"#fromChain\").text(fromChainName)\n      $(\"#fromNetworkLabel\").text(\"Ethereum\")\n      $(\"#toNetworkLabel\").text(\"Archethic\")\n      break;\n  }\n\n  $(\"#sourceChainImg\").attr(\"src\", `assets/images/bc-logos/${sourceChainLogo}`);\n\n\n  const {\n    archethicEndpoint,\n    unirisTokenAddress,\n    recipientEthereum,\n    sufficientFunds,\n    UCOPrice,\n    sourceChainExplorer,\n    bridgeAddress\n  } = await getConfig(ethChainId);\n\n  $(\"#connectMetamaskBtnSpinner\").hide();\n  $(\"#connectMetamaskBtn\").show();\n\n  $(\"#main\").hide();\n  $(\"#swapForm\").show();\n\n  let maxSwap = 20 / UCOPrice\n  $(\"#nbTokensToSwap\").attr(\"max\", maxSwap)\n\n  toChainExplorer = `${archethicEndpoint}/explorer/transaction`\n\n  $(\"#ucoPrice\").text(`1 UCO = ${UCOPrice.toFixed(5)}$`).show()\n  $(\"#swapBalanceUSD\").text(0)\n\n  if (!sufficientFunds) {\n    $(\"#error\").text(\n      \"An error occured: Bridge has insuffficient funds. Please retry later\"\n    );\n    return;\n  }\n\n  console.log(\"Archethic endpoint: \", archethicEndpoint);\n\n  const account = await signer.getAddress();\n  const unirisContract = await getERC20Contract(unirisTokenAddress, provider);\n\n  const balance = await unirisContract.balanceOf(account);\n  const erc20Amount = ethers.utils.formatUnits(balance, 18)\n  $(\"#fromBalanceUCO\").text(new Intl.NumberFormat().format(parseFloat(erc20Amount).toFixed(8)));\n  $(\"#maxUCOValue\").text(Math.min(erc20Amount, 20));\n  $(\"#fromBalanceUSD\").text(new Intl.NumberFormat().format((erc20Amount * UCOPrice).toFixed(5)));\n\n  $(\"#recipientAddress\").on(\"change\", async (e) => {\n    const archethicBalance = await getArchethicBalance($(e.target).val());\n\n    const ucoAmount = archethicBalance / 1e8\n\n    $(\"#toBalanceUCO\").text(new Intl.NumberFormat().format(parseFloat(ucoAmount).toFixed(8)));\n    $(\"#toBalanceUSD\").text(new Intl.NumberFormat().format((UCOPrice * ucoAmount).toFixed(5)));\n    $(\"#btnSwap\").show();\n  });\n\n  $(\"#recipientAddress\").focus()\n\n  $(\"#nbTokensToSwap\").on(\"change\", (e) => {\n    const amount = $(e.target).val()\n    $(\"#swapBalanceUSD\").text((amount * UCOPrice).toFixed(5))\n  })\n\n  $(\"#swapForm\").on(\"submit\", async (e) => {\n    e.preventDefault();\n    if (!e.target.checkValidity()) {\n      return;\n    }\n\n    $(\"#btnSwap\").hide();\n\n    const recipientAddress = $(\"#recipientAddress\").val();\n    await handleFormSubmit(\n      signer,\n      unirisContract,\n      recipientEthereum,\n      recipientAddress,\n      ethChainId,\n      archethic,\n      UCOPrice,\n      sourceChainExplorer,\n      bridgeAddress\n    );\n  });\n}\n\nasync function getERC20Contract(unirisTokenAddress, provider) {\n  const unirisTokenABI = await getUnirisTokenABI();\n  return new ethers.Contract(unirisTokenAddress, unirisTokenABI, provider);\n}\n\nasync function handleFormSubmit(\n  signer,\n  unirisContract,\n  recipientEthereum,\n  recipientArchethic,\n  ethChainId,\n  archethic,\n  UCOPrice,\n  sourceChainExplorer,\n  bridgeAddress\n) {\n\n  const amount = $(\"#nbTokensToSwap\").val();\n\n  const bridgeBalance = await getArchethicBalance(bridgeAddress)\n  if (bridgeBalance <= amount * 10e8) {\n    $(\"#error\").text(\n      \"An error occured: Bridge has insuffficient funds. Please retry later\"\n    );\n    return;\n  }\n\n  $(\"#steps\").show();\n  $(\"#txSummary\").hide();\n\n  const secret = new Uint8Array(32);\n  crypto.getRandomValues(secret);\n\n  const secretHex = uint8ArrayToHex(secret);\n\n  let secretDigest = await crypto.subtle.digest(\"SHA-256\", secret);\n  secretDigest = new Uint8Array(secretDigest);\n\n  const secretDigestHex = uint8ArrayToHex(secretDigest);\n\n  $(\"#ethDeploymentStep\").addClass(\"is-active\");\n\n  try {\n    const HTLC_Contract = await deployHTLC(\n      recipientEthereum,\n      unirisContract.address,\n      amount,\n      secretDigest,\n      signer,\n      7200 // 2 hours of locktime\n    );\n    $(\"#ethDeploymentStep\").removeClass(\"is-active\");\n\n    $(\"#txSummary\").show();\n\n    const HTLCAddress = HTLC_Contract.address\n\n    $(\"#txSummary1Label\").html(`Contract address on ${fromChainName}: <a href=\"${sourceChainExplorer}/address/${HTLC_Contract.address}\" target=\"_blank\">${HTLC_Contract.address}</a>`)\n    $(\"#txSummary1\").show();\n\n    $(\"#ethTransferStep\").addClass(\"is-active\")\n    const transferTokenTx = await transferTokensToHTLC(amount, HTLCAddress, unirisContract, signer);\n    console.log(`${amount} UCO transfered`);\n\n    $(\"#txSummary2Label\").html(`Provision UCO: <a href=\"${sourceChainExplorer}/tx/${transferTokenTx.transactionHash}\" target=\"_blank\">${transferTokenTx.transactionHash}</a>`)\n    $(\"#txSummary2\").show();\n\n    $(\"#ethTransferStep\").removeClass(\"is-active\")\n\n    $(\"#archethicDeploymentStep\").addClass(\"is-active\");\n\n    const contractAddress = await sendDeployRequest(\n      secretDigestHex,\n      recipientArchethic,\n      amount,\n      HTLCAddress,\n      ethChainId\n    );\n    console.log(\"Contract address on Archethic\", contractAddress);\n    $(\"#txSummary3Label\").html(`Contract address on Archethic : <a href=\"${toChainExplorer}/${contractAddress}\" target=\"_blank\">${contractAddress}</a>`)\n    $(\"#txSummary3\").show();\n\n    $(\"#archethicDeploymentStep\").removeClass(\"is-active\");\n\n    $(\"#swapStep\").addClass(\"is-active\");\n\n    const withdrawTx = await withdrawERC20Token(HTLC_Contract, signer, secretHex)\n    console.log(`Ethereum's withdraw transaction - ${withdrawTx.transactionHash}`);\n    $(\"#txSummary4Label\").html(`${fromChainName} swap: <a href=\"${sourceChainExplorer}/tx/${withdrawTx.transactionHash}\" target=\"_blank\">${withdrawTx.transactionHash}</a>`)\n    $(\"#txSummary4\").show();\n\n    const ethAccount = await signer.getAddress();\n    const erc20Balance = await unirisContract.balanceOf(ethAccount);\n    const erc20Amount = ethers.utils.formatUnits(erc20Balance, 18);\n    $(\"#fromBalanceUCO\").text(new Intl.NumberFormat().format(parseFloat(erc20Amount).toFixed(2)));\n    $(\"#maxUCOValue\").text(Math.min(erc20Amount, 20));\n    $(\"#fromBalanceUSD\").text(erc20Amount * UCOPrice);\n\n    const archethicWithdrawTx = await sendWithdrawRequest(\n      contractAddress,\n      HTLCAddress,\n      withdrawTx.transactionHash,\n      secretHex,\n      ethChainId\n    );\n    console.log(`Archethic's withdraw transaction ${archethicWithdrawTx}`)\n    $(\"#txSummary5Label\").html(`Archethic swap : <a href=\"${toChainExplorer}/${archethicWithdrawTx}\" target=\"_blank\">${archethicWithdrawTx}</a>`)\n    $(\"#txSummary5\").show();\n\n    $(\"#swapStep\").removeClass(\"is-active\");\n\n    console.log(\"Token swap finish\");\n\n    const archethicBalance = await getArchethicBalance(recipientArchethic);\n\n    const newUCOBalance = archethicBalance / 1e8\n\n    $(\"#toBalanceUCO\").text(parseFloat(newUCOBalance).toFixed(2));\n    $(\"#toBalanceUSD\").text(UCOPrice * newUCOBalance)\n    $(\"#txSummary\").show();\n  } catch (e) {\n    console.error(e.message || e);\n    $(\"#error\")\n      .text(`An error occured: ${e.message || e}`)\n      .show();\n  }\n}\n\nasync function sendDeployRequest(\n  secretDigestHex,\n  recipientAddress,\n  amount,\n  ethereumContractAddress,\n  ethChainId\n) {\n  const endTime = new Date();\n  endTime.setSeconds(endTime.getSeconds() + 10000);\n  const endTimeUNIX = Math.floor(endTime / 1000);\n\n  return fetch(\"/swap/deployContract\", {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      secretHash: secretDigestHex,\n      recipientAddress: recipientAddress,\n      amount: amount * 1e8,\n      endTime: endTimeUNIX,\n      ethereumContractAddress: ethereumContractAddress,\n      ethereumChainId: ethChainId,\n    }),\n  })\n    .then(handleResponse)\n    .then((r) => r.contractAddress);\n}\n\nasync function withdrawERC20Token(HTLC_Contract, signer, secret) {\n  const HTLC_ContractSigner = await HTLC_Contract.connect(signer)\n  const tx = await HTLC_ContractSigner.withdraw(`0x${secret}`, { gasLimit: 10000000 })\n  return await tx.wait()\n}\n\nasync function sendWithdrawRequest(\n  archethicContractAddress,\n  ethereumContractAddress,\n  ethereumWithdrawTransaction,\n  secret,\n  ethChainId\n) {\n  return fetch(\"/swap/withdraw\", {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      archethicContractAddress: archethicContractAddress,\n      ethereumContractAddress: ethereumContractAddress,\n      ethereumWithdrawTransaction: ethereumWithdrawTransaction,\n      secret: secret,\n      ethereumChainId: ethChainId,\n    }),\n  }).then(handleResponse)\n    .then(r => {\n      const { archethicWithdrawTransaction } = r\n      return archethicWithdrawTransaction\n    })\n}\n\nasync function deployHTLC(\n  recipientEthereum,\n  unirisTokenAddress,\n  amount,\n  hash,\n  signer,\n  lockTime\n) {\n  const { abi: HTLCABI, bytecode: HTLCByteCode } = await getHTLC();\n  const factory = new ethers.ContractFactory(HTLCABI, HTLCByteCode, signer);\n\n  const contract = await factory.deploy(\n    recipientEthereum,\n    unirisTokenAddress,\n    ethers.utils.parseUnits(amount, 18),\n    hash,\n    lockTime,\n    { gasLimit: 1000000 }\n  );\n\n  await contract.deployTransaction.wait();\n  console.log(\"HTLC contract deployed at \" + contract.address);\n\n  return contract;\n}\n\nasync function transferTokensToHTLC(\n  amount,\n  HTLCAddress,\n  unirisContract,\n  signer\n) {\n  const unirisWithSigner = unirisContract.connect(signer);\n\n  const tx = await unirisWithSigner.transfer(\n    HTLCAddress,\n    ethers.utils.parseUnits(amount, 18)\n  );\n\n  return await tx.wait()\n}\n\nconst byteToHex = [];\nfor (let n = 0; n <= 0xff; ++n) {\n  const hexOctet = n.toString(16).padStart(2, \"0\");\n  byteToHex.push(hexOctet);\n}\n\nfunction uint8ArrayToHex(bytes) {\n  const buff = new Uint8Array(bytes);\n  const hexOctets = new Array(buff.length);\n\n  for (let i = 0; i < buff.length; ++i) {\n    hexOctets[i] = byteToHex[buff[i]];\n  }\n\n  return hexOctets.join(\"\");\n}\n\nasync function getConfig(ethChainId) {\n  return fetch(\"/status\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n    },\n    body: JSON.stringify({\n      ethereumChainId: ethChainId,\n    }),\n  })\n    .then(handleResponse)\n    .then((r) => {\n      if (r.status != \"ok\") {\n        throw r.status;\n      }\n\n      return {\n        archethicEndpoint: r.archethicEndpoint,\n        unirisTokenAddress: r.unirisTokenAddress,\n        recipientEthereum: r.recipientEthereum,\n        sufficientFunds: r.sufficientFunds,\n        UCOPrice: r.UCOPrice,\n        sourceChainExplorer: r.sourceChainExplorer,\n        bridgeAddress: r.bridgeAddress\n      };\n    });\n}\n\nasync function getUnirisTokenABI() {\n  const r = await fetch(\"uco_abi.json\");\n  return await r.json();\n}\n\nasync function getHTLC() {\n  const r = await fetch(\"HTLC.json\");\n  const r_1 = await r.json();\n  return {\n    abi: r_1.abi,\n    bytecode: r_1.bytecode,\n  };\n}\n\nasync function handleResponse(response) {\n  return new Promise(function (resolve, reject) {\n    if (response.status >= 200 && response.status <= 299) {\n      response.json().then(resolve);\n    } else {\n      response\n        .json()\n        .then(reject)\n        .catch(() => reject(response.statusText));\n    }\n  });\n}\n\nasync function getArchethicBalance(address) {\n  return fetch(`/balances/archethic/${address}`)\n    .then(handleResponse)\n    .then((r) => {\n      return r.balance\n    });\n}\n"],
  "mappings": "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",
  "names": ["startApp", "toChainExplorer", "fromChainName", "provider", "ethChainId", "signer", "sourceChainLogo", "archethicEndpoint", "unirisTokenAddress", "recipientEthereum", "sufficientFunds", "UCOPrice", "sourceChainExplorer", "bridgeAddress", "getConfig", "maxSwap", "account", "unirisContract", "getERC20Contract", "balance", "erc20Amount", "e", "ucoAmount", "getArchethicBalance", "amount", "recipientAddress", "handleFormSubmit", "unirisTokenABI", "getUnirisTokenABI", "recipientArchethic", "archethic", "secret", "secretHex", "uint8ArrayToHex", "secretDigest", "secretDigestHex", "HTLC_Contract", "deployHTLC", "HTLCAddress", "transferTokenTx", "transferTokensToHTLC", "contractAddress", "sendDeployRequest", "withdrawTx", "withdrawERC20Token", "ethAccount", "erc20Balance", "archethicWithdrawTx", "sendWithdrawRequest", "newUCOBalance", "ethereumContractAddress", "endTime", "endTimeUNIX", "handleResponse", "r", "archethicContractAddress", "ethereumWithdrawTransaction", "archethicWithdrawTransaction", "hash", "lockTime", "HTLCABI", "HTLCByteCode", "getHTLC", "contract", "byteToHex", "n", "hexOctet", "bytes", "buff", "hexOctets", "i", "r_1", "response", "resolve", "reject", "address"]
}
