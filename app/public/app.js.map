{
  "version": 3,
  "sources": ["../client/app.js"],
  "sourcesContent": ["window.onload = async function() {\n  if (typeof window.ethereum !== \"undefined\") {\n    console.log(\"MetaMask is installed!\");\n  } else {\n    throw \"No ethereum provider is installed\";\n  }\n};\n\n$(\"#connectMetamaskBtn\").on('click', async () => {\n  provider = new ethers.providers.Web3Provider(window.ethereum);\n  $(\"#main\").hide()\n  await startApp(provider);\n})\n\nasync function startApp(provider) {\n  $(\"#swapForm\").show();\n\n  const { _archethicEndpoint, unirisTokenAddress, recipientEthereum } = await getConfig();\n\n  // console.log(\"Archethic endpoint: \", archethicEndpoint);\n  // const archethic = new Archethic(archethicEndpoint)\n  // await archethic.connect()\n\n  await provider.send(\"eth_requestAccounts\", []);\n  const signer = provider.getSigner();\n\n  const account = await signer.getAddress();\n  const unirisContract = await getERC20Contract(unirisTokenAddress, provider);\n\n  const balance = await unirisContract.balanceOf(account);\n  $(\"#ucoEthBalance\").text(ethers.utils.formatUnits(balance, 18))\n\n  // $(\"#recipientAddress\").on(\"change\", async () => {\n  //   const archethicBalance = await getArchethicBalance(archethic, $(this).val())\n  //   console.log(archethicBalance)\n  // })\n\n\n  $(\"#swapForm\").on('submit', (e) => {\n    e.preventDefault();\n    if (!swapForm.checkValidity()) {\n      return;\n    }\n\n    const recipientAddress = $(\"#recipientAddress\").val();\n    handleFormSubmit(signer, unirisContract, recipientEthereum, recipientAddress);\n  })\n}\n\nasync function getERC20Contract(unirisTokenAddress, provider) {\n  const unirisTokenABI = await getUnirisTokenABI();\n  return new ethers.Contract(unirisTokenAddress, unirisTokenABI, provider);\n}\n\nasync function handleFormSubmit(signer, unirisContract, recipientEthereum, recipientArchethic) {\n  const secret = new Uint8Array(32);\n  crypto.getRandomValues(secret);\n\n  const secretHex = uint8ArrayToHex(secret);\n\n  let secretDigest = await crypto.subtle.digest(\"SHA-256\", secret);\n  secretDigest = new Uint8Array(secretDigest);\n\n  const secretDigestHex = uint8ArrayToHex(secretDigest);\n  console.log(\"hash\", secretDigestHex);\n\n  const amount = $(\"#nbTokensToSwap\").val();\n\n  try {\n\n    const HTLC_Contract = await deployHTLC(\n      recipientEthereum,\n      unirisContract.address,\n      amount,\n      secretDigest,\n      signer,\n      10000\n    );\n\n    const HTLCAddress = HTLC_Contract.address;\n\n    await transferTokensToHTLC(amount, HTLCAddress, unirisContract, signer)\n\n    const contractAddress = await sendDeployRequest(\n      secretDigestHex,\n      recipientArchethic,\n      amount,\n      HTLCAddress\n    );\n    console.log(\"Contract address on Archethic\", contractAddress);\n\n    await sendWithdrawRequest(contractAddress, HTLCAddress, secretHex);\n\n  } catch (e) {\n    console.error(e);\n  }\n}\n\nasync function sendDeployRequest(secretDigestHex, recipientAddress, amount, ethereumContractAddress) {\n  const endTime = new Date();\n  endTime.setSeconds(endTime.getSeconds() + 10000);\n  const endTimeUNIX = Math.floor(endTime / 1000);\n\n  return fetch(\"/swap/deployContract\", {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      secretHash: secretDigestHex,\n      recipientAddress: recipientAddress,\n      amount: amount * 1e8,\n      endTime: endTimeUNIX,\n      ethereumContractAddress: ethereumContractAddress\n    }),\n  })\n    .then((r) => r.json())\n    .then((r) => r.contractAddress);\n}\n\nasync function sendWithdrawRequest(archethicContractAddress, ethereumContractAddress, secret) {\n  return fetch(\"/swap/withdraw\", {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      archethicContractAddress: archethicContractAddress,\n      ethereumContractAddress: ethereumContractAddress,\n      secret: secret,\n    }),\n  }).then((r) => r.json());\n}\n\nasync function deployHTLC(\n  recipientEthereum,\n  unirisTokenAddress,\n  amount,\n  hash,\n  signer,\n  lockTime\n) {\n  const { abi: HTLCABI, bytecode: HTLCByteCode } = await getHTLC();\n  const factory = new ethers.ContractFactory(HTLCABI, HTLCByteCode, signer);\n\n  const contract = await factory.deploy(\n    recipientEthereum,\n    unirisTokenAddress,\n    ethers.utils.parseUnits(amount, 18),\n    hash, lockTime, { gasLimit: 1000000 }\n  );\n\n  await contract.deployTransaction.wait();\n  console.log(\"HTLC contract deployed at \" + contract.address);\n\n  return contract;\n}\n\nasync function transferTokensToHTLC(\n  amount,\n  HTLCAddress,\n  unirisContract,\n  signer\n) {\n  const unirisWithSigner = unirisContract.connect(signer);\n\n  await unirisWithSigner.transfer(\n    HTLCAddress,\n    ethers.utils.parseUnits(amount, 18)\n  );\n  const filter = unirisContract.filters.Transfer(null, HTLCAddress);\n\n  return new Promise((resolve, _reject) => {\n    unirisContract.on(filter, (_from, _to, amount, _event) => {\n      console.log(ethers.utils.formatUnits(amount, 18) + \" UCO transfered\");\n      resolve();\n    });\n  });\n}\n\nconst byteToHex = [];\nfor (let n = 0; n <= 0xff; ++n) {\n  const hexOctet = n.toString(16).padStart(2, \"0\");\n  byteToHex.push(hexOctet);\n}\n\nfunction uint8ArrayToHex(bytes) {\n  const buff = new Uint8Array(bytes);\n  const hexOctets = new Array(buff.length);\n\n  for (let i = 0; i < buff.length; ++i) {\n    hexOctets[i] = byteToHex[buff[i]];\n  }\n\n  return hexOctets.join(\"\");\n}\n\nasync function getConfig() {\n  return fetch(\"/status\")\n    .then((r) => r.json())\n    .then((r) => {\n      return {\n        archethicEndpoint: r.archethicEndpoint,\n        unirisTokenAddress: r.unirisTokenAddress,\n        recipientEthereum: r.recipientEthereum\n      };\n    });\n}\n\nasync function getUnirisTokenABI() {\n  const r = await fetch(\"uco_ABI.json\");\n  return await r.json();\n}\n\nasync function getHTLC() {\n  const r = await fetch(\"HTLC.json\");\n  const r_1 = await r.json();\n  return {\n    abi: r_1.abi,\n    bytecode: r_1.bytecode,\n  };\n}\n\n// async function getArchethicBalance(archethic, address) {\n\n//   archethic.requestNode(async (endpoint) => {\n//     const url = new URL(\"/api\", endpoint);\n//     const r = await fetch(url, {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//         Accept: \"application/json\",\n//       },\n//       body: JSON.stringify({\n//         query: `\n//           query {\n//             balance(address: \"${address}\") {\n//               uco\n//             }\n//           }\n//         `\n//       })\n//     });\n//     const res = await r.json();\n//     if (res.data.balance && res.data.balance.uco) {\n//       return res.data.balance.uco;\n//     }\n//     return 0;\n//   })\n// }\n"],
  "mappings": "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",
  "names": ["startApp", "provider", "_archethicEndpoint", "unirisTokenAddress", "recipientEthereum", "getConfig", "signer", "account", "unirisContract", "getERC20Contract", "balance", "e", "recipientAddress", "handleFormSubmit", "unirisTokenABI", "getUnirisTokenABI", "recipientArchethic", "secret", "secretHex", "uint8ArrayToHex", "secretDigest", "secretDigestHex", "amount", "HTLCAddress", "deployHTLC", "transferTokensToHTLC", "contractAddress", "sendDeployRequest", "sendWithdrawRequest", "ethereumContractAddress", "endTime", "endTimeUNIX", "r", "archethicContractAddress", "hash", "lockTime", "HTLCABI", "HTLCByteCode", "getHTLC", "contract", "filter", "resolve", "_reject", "_from", "_to", "_event", "byteToHex", "n", "hexOctet", "bytes", "buff", "hexOctets", "i", "r_1"]
}
