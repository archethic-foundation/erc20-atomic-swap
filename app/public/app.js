(()=>{window.onload=async function(){if(typeof window.ethereum<"u")console.log("MetaMask is installed!");else throw"No ethereum provider is installed"};$("#connectMetamaskBtn").on("click",async()=>{provider=new ethers.providers.Web3Provider(window.ethereum),await provider.send("eth_requestAccounts",[]),$("#main").hide(),await m(provider)});async function m(t){$("#swapForm").show();let{chainId:e}=await t.getNetwork(),{archethicEndpoint:n,unirisTokenAddress:a,recipientEthereum:o,sufficientFunds:s}=await B(e);if(!s){$("#error").text("An error occured: Bridge has insuffficient funds. Please retry later"),$("#btnSwap").hide();return}let r=new Archethic(n);await r.connect(),console.log("Archethic endpoint: ",n);let c=t.getSigner(),u=await c.getAddress(),d=await A(a,t),l=await d.balanceOf(u);$("#ucoEthBalance").text(ethers.utils.formatUnits(l,18)),$("#recipientAddress").on("change",async i=>{let h=await g(r,$(i.target).val());$("#ucoArchethicBalance").text(h/1e8)}),$("#swapForm").on("submit",async i=>{if(i.preventDefault(),!i.target.checkValidity())return;let h=$("#recipientAddress").val();await C(c,d,o,h,e,r)})}async function A(t,e){let n=await H();return new ethers.Contract(t,n,e)}async function C(t,e,n,a,o,s){$("#progressBar").show();let r=new Uint8Array(32);crypto.getRandomValues(r);let c=w(r),u=await crypto.subtle.digest("SHA-256",r);u=new Uint8Array(u);let d=w(u),l=$("#nbTokensToSwap").val();try{$("#deployEthProgress").css({color:"white"});let h=(await j(n,e.address,l,u,t,1e4)).address;await O(l,h,e,t),$("#deployEthProgress").css({color:"greenyellow"}),$("#deployArchethicProgress").css({color:"white"});let y=await b(d,a,l,h,o);console.log("Contract address on Archethic",y),$("#deployArchethicProgress").css({color:"greenyellow"}),await S(y,h,c,o),console.log("Token swap finish"),$("#swapProgress").css({color:"greenyellow"}),$("#swapValidated").css({color:"greenyellow"});let T=await g(s,a);$("#ucoArchethicBalance").text(T/1e8)}catch(i){console.error(i.message||i),$("#error").text(`An error occured: ${i.message||i}`).show()}}async function b(t,e,n,a,o){let s=new Date;s.setSeconds(s.getSeconds()+1e4);let r=Math.floor(s/1e3);return fetch("/swap/deployContract",{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({secretHash:t,recipientAddress:e,amount:n*1e8,endTime:r,ethereumContractAddress:a,ethereumChainId:o})}).then(p).then(c=>c.contractAddress)}async function S(t,e,n,a){return fetch("/swap/withdraw",{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({archethicContractAddress:t,ethereumContractAddress:e,secret:n,ethereumChainId:a})}).then(p)}async function j(t,e,n,a,o,s){let{abi:r,bytecode:c}=await P(),d=await new ethers.ContractFactory(r,c,o).deploy(t,e,ethers.utils.parseUnits(n,18),a,s,{gasLimit:1e6});return await d.deployTransaction.wait(),console.log("HTLC contract deployed at "+d.address),d}async function O(t,e,n,a){await n.connect(a).transfer(e,ethers.utils.parseUnits(t,18));let s=n.filters.Transfer(null,e);return new Promise((r,c)=>{n.on(s,(u,d,l,i)=>{console.log(ethers.utils.formatUnits(l,18)+" UCO transfered"),r()})})}var f=[];for(let t=0;t<=255;++t){let e=t.toString(16).padStart(2,"0");f.push(e)}function w(t){let e=new Uint8Array(t),n=new Array(e.length);for(let a=0;a<e.length;++a)n[a]=f[e[a]];return n.join("")}async function B(t){return fetch("/status",{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify({ethereumChainId:t})}).then(p).then(e=>({archethicEndpoint:e.archethicEndpoint,unirisTokenAddress:e.unirisTokenAddress,recipientEthereum:e.recipientEthereum,sufficientFunds:e.sufficientFunds}))}async function H(){return await(await fetch("uco_ABI.json")).json()}async function P(){let e=await(await fetch("HTLC.json")).json();return{abi:e.abi,bytecode:e.bytecode}}async function g(t,e){return t.requestNode(async n=>{let a=new URL("/api",n),s=await(await fetch(a,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify({query:`
            query {
              lastTransaction(address: "${e}") {
                 balance {
                   uco
                 }
              }
            }
          `})})).json();return s.errors&&s.errors.find(r=>r.message=="transaction_not_exists")?await x(t,e):s.data.lastTransaction&&s.data.lastTransaction.balance?s.data.lastTransaction.balance.uco:0})}async function x(t,e){return t.requestNode(async n=>{let a=new URL("/api",n),s=await(await fetch(a,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify({query:`
            query {
              transactionInputs(address: "${e}") {
                 type,
                 amount
              }
            }
          `})})).json();return s.data.transactionInputs&&s.data.transactionInputs.length>0?s.data.transactionInputs.filter(r=>r.type=="UCO").reduce((r,{amount:c})=>r+c,0):0})}async function p(t){return new Promise(function(e,n){t.status>=200&&t.status<=299?t.json().then(e):t.json().then(n).catch(()=>n(t.statusText))})}})();
//# sourceMappingURL=app.js.map
