(()=>{window.onload=async function(){if(typeof window.ethereum<"u")console.log("MetaMask is installed!");else throw"No ethereum provider is installed"};$("#connectMetamaskBtn").on("click",async()=>{try{$("#connectMetamaskBtn").hide(),$("#connectMetamaskBtnSpinner").show(),provider=new ethers.providers.Web3Provider(window.ethereum),await provider.send("eth_requestAccounts",[]),await x(provider),$("#connectMetamaskBtnSpinner").hide(),$("#connectMetamaskBtn").show()}catch(t){$("#connectMetamaskBtnSpinner").hide(),$("#connectMetamaskBtn").show(),$("#error").text(`An error occured: ${t.message||t}`).show()}});async function x(t){let{chainId:e}=await t.getNetwork(),a=t.getSigner(),n;switch(e){case 80001:n="Polygon-logo.svg",$("#fromChain").text("Polygon");break;case 137:n="Polygon-logo.svg",$("#fromChain").text("Polygon");break;case 97:n="BSC-logo.svg",$("#fromChain").text("Binance");break;case 56:n="BSC-logo.svg",$("#fromChain").text("Binance");break;default:n="Ethereum-logo.svg",$("#fromChain").text("Ethereum");break}let{archethicEndpoint:o,unirisTokenAddress:s,recipientEthereum:r,sufficientFunds:d,UCOPrice:c}=await D(e);if($("#sourceChainImg").attr("src",`assets/images/bc-logos/${n}`),$("#main").hide(),$("#swapForm").show(),$("#ucoPrice").text(`1 UCO = ${c}$`).show(),$("#swapBalanceUSD").text(c),!d){$("#error").text("An error occured: Bridge has insuffficient funds. Please retry later");return}console.log("Archethic endpoint: ",o);let l=await a.getAddress(),w=await B(s,t),i=await w.balanceOf(l),p=ethers.utils.formatUnits(i,18);$("#fromBalanceUCO").text(parseFloat(p).toFixed(2)),$("#fromBalanceUSD").text(p*c),$("#recipientAddress").on("change",async h=>{let f=await T($(h.target).val())/1e8;$("#toBalanceUCO").text(parseFloat(f).toFixed(2)),$("#toBalanceUSD").text(c*f),$("#btnSwap").show()}),$("#recipientAddress").focus(),$("#nbTokensToSwap").on("change",h=>{let u=$(h.target).val();$("#swapBalanceUSD").text(u*c)}),$("#swapForm").on("submit",async h=>{if(h.preventDefault(),!h.target.checkValidity())return;$("#btnSwap").hide();let u=$("#recipientAddress").val();await b(a,w,r,u,e,archethic,c)})}async function B(t,e){let a=await F();return new ethers.Contract(t,a,e)}async function b(t,e,a,n,o,s){$("#steps").show();let r=new Uint8Array(32);crypto.getRandomValues(r);let d=C(r),c=await crypto.subtle.digest("SHA-256",r);c=new Uint8Array(c);let l=C(c),w=$("#nbTokensToSwap").val();$("#ethDeploymentStep").addClass("is-active");try{let i=await H(a,e.address,w,c,t,7200);$("#ethDeploymentStep").removeClass("is-active");let p=i.address;$("#ethTransferStep").addClass("is-active"),await O(w,p,e,t),$("#ethTransferStep").removeClass("is-active"),$("#archethicDeploymentStep").addClass("is-active");let h=await k(l,n,w,p,o);console.log("Contract address on Archethic",h),$("#archethicDeploymentStep").removeClass("is-active"),$("#swapStep").addClass("is-active");let u=await v(i,t,d);console.log(`Ethereum's withdraw transaction - ${u.transactionHash}`);let f=await t.getAddress(),A=await e.balanceOf(f),g=ethers.utils.formatUnits(A,18);$("#fromBalanceUCO").text(parseFloat(g).toFixed(2)),$("#fromBalanceUSD").text(g*s),await U(h,p,u.transactionHash,d,o),console.log("Token swap finish"),$("#swapStep").removeClass("is-active");let y=await T(n)/1e8;$("#toBalanceUCO").text(parseFloat(y).toFixed(2)),$("#toBalanceUSD").text(s*y),$("#endStep").addClass("is-active")}catch(i){console.error(i.message||i),$("#error").text(`An error occured: ${i.message||i}`).show()}}async function k(t,e,a,n,o){let s=new Date;s.setSeconds(s.getSeconds()+1e4);let r=Math.floor(s/1e3);return fetch("/swap/deployContract",{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({secretHash:t,recipientAddress:e,amount:a*1e8,endTime:r,ethereumContractAddress:n,ethereumChainId:o})}).then(m).then(d=>d.contractAddress)}async function v(t,e,a){return await(await(await t.connect(e)).withdraw(`0x${a}`,{gasLimit:1e7})).wait()}async function U(t,e,a,n,o){return fetch("/swap/withdraw",{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({archethicContractAddress:t,ethereumContractAddress:e,ethereumWithdrawTransaction:a,secret:n,ethereumChainId:o})}).then(m).then(s=>{let{archethicWithdrawTransaction:r}=s;console.log(`Archethic's withdraw transaction ${r}`)})}async function H(t,e,a,n,o,s){let{abi:r,bytecode:d}=await L(),l=await new ethers.ContractFactory(r,d,o).deploy(t,e,ethers.utils.parseUnits(a,18),n,s,{gasLimit:1e6});return await l.deployTransaction.wait(),console.log("HTLC contract deployed at "+l.address),l}async function O(t,e,a,n){await(await a.connect(n).transfer(e,ethers.utils.parseUnits(t,18))).wait(),console.log(`${t} UCO transfered`)}var S=[];for(let t=0;t<=255;++t){let e=t.toString(16).padStart(2,"0");S.push(e)}function C(t){let e=new Uint8Array(t),a=new Array(e.length);for(let n=0;n<e.length;++n)a[n]=S[e[n]];return a.join("")}async function D(t){return fetch("/status",{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify({ethereumChainId:t})}).then(m).then(e=>{if(e.status!="ok")throw e.status;return{archethicEndpoint:e.archethicEndpoint,unirisTokenAddress:e.unirisTokenAddress,recipientEthereum:e.recipientEthereum,sufficientFunds:e.sufficientFunds,UCOPrice:e.UCOPrice}})}async function F(){return await(await fetch("uco_abi.json")).json()}async function L(){let e=await(await fetch("HTLC.json")).json();return{abi:e.abi,bytecode:e.bytecode}}async function m(t){return new Promise(function(e,a){t.status>=200&&t.status<=299?t.json().then(e):t.json().then(a).catch(()=>a(t.statusText))})}async function T(t){return fetch(`/balances/archethic/${t}`).then(m).then(e=>e.balance)}})();
//# sourceMappingURL=app.js.map
