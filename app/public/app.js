(()=>{window.onload=async function(){if(typeof window.ethereum<"u")console.log("MetaMask is installed!");else throw"No ethereum provider is installed"};$("#connectMetamaskBtn").on("click",async()=>{provider=new ethers.providers.Web3Provider(window.ethereum),$("#main").hide(),await y(provider)});async function y(e){$("#swapForm").show();let{_archethicEndpoint:t,unirisTokenAddress:n,recipientEthereum:s,sufficientFunds:r}=await b();if(!r){$("#error").text("An error occured: Bridge has insuffficient funds. Please retry later"),$("#btnSwap").hide();return}await e.send("eth_requestAccounts",[]);let a=e.getSigner(),c=await a.getAddress(),i=await p(n,e),d=await i.balanceOf(c);$("#ucoEthBalance").text(ethers.utils.formatUnits(d,18)),$("#swapForm").on("submit",async o=>{if(o.preventDefault(),!o.target.checkValidity())return;let u=$("#recipientAddress").val();await g(a,i,s,u)})}async function p(e,t){let n=await H();return new ethers.Contract(e,n,t)}async function g(e,t,n,s){$("#progressBar").show();let r=new Uint8Array(32);crypto.getRandomValues(r);let a=w(r),c=await crypto.subtle.digest("SHA-256",r);c=new Uint8Array(c);let i=w(c),d=$("#nbTokensToSwap").val();try{$("#deployEthProgress").css({color:"white"});let u=(await T(n,t.address,d,c,e,1e4)).address;await C(d,u,t,e),$("#deployEthProgress").css({color:"greenyellow"}),$("#deployArchethicProgress").css({color:"white"});let h=await m(i,s,d,u);console.log("Contract address on Archethic",h),$("#deployArchethicProgress").css({color:"greenyellow"}),await A(h,u,a),console.log("Token swap finish"),$("#swapProgress").css({color:"greenyellow"}),$("#swapValidated").css({color:"greenyellow"})}catch(o){console.error(o.message||o),$("#error").text(`An error occured: ${o.message||o}`).show()}}async function m(e,t,n,s){let r=new Date;r.setSeconds(r.getSeconds()+1e4);let a=Math.floor(r/1e3);return fetch("/swap/deployContract",{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({secretHash:e,recipientAddress:t,amount:n*1e8,endTime:a,ethereumContractAddress:s})}).then(l).then(c=>c.contractAddress)}async function A(e,t,n){return fetch("/swap/withdraw",{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({archethicContractAddress:e,ethereumContractAddress:t,secret:n})}).then(l)}async function T(e,t,n,s,r,a){let{abi:c,bytecode:i}=await S(),o=await new ethers.ContractFactory(c,i,r).deploy(e,t,ethers.utils.parseUnits(n,18),s,a,{gasLimit:1e6});return await o.deployTransaction.wait(),console.log("HTLC contract deployed at "+o.address),o}async function C(e,t,n,s){await n.connect(s).transfer(t,ethers.utils.parseUnits(e,18));let a=n.filters.Transfer(null,t);return new Promise((c,i)=>{n.on(a,(d,o,u,h)=>{console.log(ethers.utils.formatUnits(u,18)+" UCO transfered"),c()})})}var f=[];for(let e=0;e<=255;++e){let t=e.toString(16).padStart(2,"0");f.push(t)}function w(e){let t=new Uint8Array(e),n=new Array(t.length);for(let s=0;s<t.length;++s)n[s]=f[t[s]];return n.join("")}async function b(){return fetch("/status").then(l).then(e=>({archethicEndpoint:e.archethicEndpoint,unirisTokenAddress:e.unirisTokenAddress,recipientEthereum:e.recipientEthereum,sufficientFunds:e.sufficientFunds}))}async function H(){return await(await fetch("uco_ABI.json")).json()}async function S(){let t=await(await fetch("HTLC.json")).json();return{abi:t.abi,bytecode:t.bytecode}}async function l(e){return new Promise(function(t,n){e.status>=200&&e.status<=299?e.json().then(t):e.json().then(n).catch(()=>n(e.statusText))})}})();
//# sourceMappingURL=app.js.map
